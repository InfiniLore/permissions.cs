// ---------------------------------------------------------------------------------------------------------------------
// Imports
// ---------------------------------------------------------------------------------------------------------------------
using CodeOfChaos.Testing.TUnit;
using InfiniLore.Permissions;
using InfiniLore.Permissions.Generators;
using JetBrains.Annotations;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Reflection;
using System.Text.RegularExpressions;

namespace Tests.InfiniLore.Permissions.Generators;
// ---------------------------------------------------------------------------------------------------------------------
// Code
// ---------------------------------------------------------------------------------------------------------------------
public class PermissionsStoreGeneratorTests {
    private static Assembly[] ReferenceAssemblies { get; } = [
        typeof(object).Assembly,
        typeof(ValueTuple).Assembly,
        typeof(Attribute).Assembly,
        typeof(Console).Assembly,
        System.Reflection.Assembly.Load("System.Runtime"),
        
        typeof(PermissionsStoreAttribute).Assembly,
        typeof(GeneratorFlags).Assembly,
        typeof(PrefixAttribute).Assembly,
        typeof(Regex).Assembly
    ];
    
    // -----------------------------------------------------------------------------------------------------------------
    // Methods
    // -----------------------------------------------------------------------------------------------------------------
    [Test]
    public async Task IsRepoClassCandidate_ShouldRecognizeCandidate() {
        const string classCode = """
            [PermissionsStore]
            public partial class SampleClass { }
            """;

        SyntaxTree tree = CSharpSyntaxTree.ParseText(classCode);
        SyntaxNode node = tree.GetCompilationUnitRoot().DescendantNodes().OfType<ClassDeclarationSyntax>().First();
        
        bool result = PermissionsStoreGenerator.IsRepoClassCandidate(node, CancellationToken.None);

        await Assert.That(result).IsTrue().Because("The class with PermissionsStore attribute should be recognized as a candidate.");
    }

    [Test]
    [Arguments(SinglePermission, SinglePermissionOutput, "Permissions")]
    [Arguments(DifferentAccessModifiers, DifferentAccessModifiersOutput, "Permissions")]
    [Arguments(ToUpperCase, ToUpperCaseOutput, "Permissions")]
    [Arguments(Obfuscation, ObfuscationOutput, "Permissions")]
    [Arguments(ObfuscationUppercase, ObfuscationUppercaseOutput, "Permissions")]
    [Arguments(ParsePrefix, ParsePrefixOutput, "Permissions")]
    [Arguments(ParsePrefixUpperCase, ParsePrefixUpperCaseOutput, "ParsePrefixUpperCasePermissions")]
    [Arguments(MultiplePrefixes, MultiplePrefixesOutput, "MultiplePrefixesPermissions")]
    [Arguments(GenerateAllPermissionsMethod, GenerateAllPermissionsMethodOutput, "GenerateAllPermissionsMethodPermissions")]
    public async Task TestText(string inputText, string expectedOutput, string repoName) {
        // Arrange
        RoslynGeneratorRunner runner = await new RoslynCompilationRunner()
            .AddReferences(ReferenceAssemblies)
            .AddDocument("Test.cs", inputText)
            .GetGeneratorRunnerAsync();

        // Act
        GeneratorDriverRunResult runResult = runner.AddGenerator<PermissionsStoreGenerator>();

        // Assert
        await Assert.That(runResult).HasSourceTextEqualTo(
            $"{repoName}.g.cs",
            expectedOutput,
            ignoreWhiteSpace: true,
            withTrimming: true
        );
    }
    
    // -----------------------------------------------------------------------------------------------------------------
    // Test cases
    // -----------------------------------------------------------------------------------------------------------------
    #region SinglePermission Test
    [LanguageInjection("csharp")] public const string SinglePermission = """
        namespace TestNamespace {
            [InfiniLore.Permissions.PermissionsStore]
            public static partial class Permissions {
                [InfiniLore.Permissions.Prefix("data.users")] public static partial string DuckiesRead { get; }
            }
        }
        
        """;

    [LanguageInjection("csharp")] public const string SinglePermissionOutput = """
        // <auto-generated />
        using System.Collections.Generic;
        namespace TestNamespace;

        public partial class Permissions {
            public static partial string DuckiesRead { get => "data.users.duckies.read"; }
        }
        """;
    #endregion

    #region DifferentAccessModifiers Test
    [LanguageInjection("csharp")] public const string DifferentAccessModifiers = """
        namespace TestNamespace {
            [InfiniLore.Permissions.PermissionsStore]
            public static partial class Permissions {
                [InfiniLore.Permissions.Prefix("data.users")] public static partial string DuckiesPublic { get; }
                [InfiniLore.Permissions.Prefix("data.users")] private static partial string DuckiesPrivate { get; }
                [InfiniLore.Permissions.Prefix("data.users")] internal static partial string DuckiesInternal { get; }
                
                public static partial string SomethingPublic { get; }
                private static partial string SomethingPrivate { get; }
                internal static partial string SomethingInternal { get; }
            }
        }

        """;

    [LanguageInjection("csharp")] public const string DifferentAccessModifiersOutput = """
        // <auto-generated />
        using System.Collections.Generic;
        namespace TestNamespace;

        public partial class Permissions {
            public static partial string DuckiesPublic { get => "data.users.duckies.public"; }
            private static partial string DuckiesPrivate { get => "data.users.duckies.private"; }
            internal static partial string DuckiesInternal { get => "data.users.duckies.internal"; }
            public static partial string SomethingPublic { get => "something.public"; }
            private static partial string SomethingPrivate { get => "something.private"; }
            internal static partial string SomethingInternal { get => "something.internal"; }
        }
        """;
    #endregion

    #region Obfuscation Test
    [LanguageInjection("csharp")] public const string Obfuscation = """
        namespace TestNamespace {
            [InfiniLore.Permissions.PermissionsStore(InfiniLore.Permissions.GeneratorFlags.Obfuscate)]
            public static partial class Permissions {
                [InfiniLore.Permissions.Prefix("data.users")] public static partial string DuckiesPublic { get; }
                [InfiniLore.Permissions.Prefix("data.users")] private static partial string DuckiesPrivate { get; }
                [InfiniLore.Permissions.Prefix("data.users")] internal static partial string DuckiesInternal { get; }
                        
                public static partial string SomethingPublic { get; }
                private static partial string SomethingPrivate { get; }
                internal static partial string SomethingInternal { get; }
            }
        }

        """;

    [LanguageInjection("csharp")] public const string ObfuscationOutput = """
        // <auto-generated />
        using System.Collections.Generic;
        namespace TestNamespace;
        
        public partial class Permissions {
            public static partial string DuckiesPublic { get => "SzCjo"; }
            private static partial string DuckiesPrivate { get => "bAvet"; }
            internal static partial string DuckiesInternal { get => "8zEwg"; }
            public static partial string SomethingPublic { get => "JxtZL"; }
            private static partial string SomethingPrivate { get => "mUACH"; }
            internal static partial string SomethingInternal { get => "Cxlhz"; }
        }
        
        """;
    #endregion
    
    #region Obfuscation Test
    [LanguageInjection("csharp")] public const string ObfuscationUppercase = """
        namespace TestNamespace {
            [InfiniLore.Permissions.PermissionsStore(InfiniLore.Permissions.GeneratorFlags.Obfuscate | InfiniLore.Permissions.GeneratorFlags.ToUpperCase)]
            public static partial class Permissions {
                [InfiniLore.Permissions.Prefix("data.users")] public static partial string DuckiesPublic { get; }
                [InfiniLore.Permissions.Prefix("data.users")] private static partial string DuckiesPrivate { get; }
                [InfiniLore.Permissions.Prefix("data.users")] internal static partial string DuckiesInternal { get; }
                        
                public static partial string SomethingPublic { get; }
                private static partial string SomethingPrivate { get; }
                internal static partial string SomethingInternal { get; }
            }
        }

        """;

    [LanguageInjection("csharp")] public const string ObfuscationUppercaseOutput = """
        // <auto-generated />
        using System.Collections.Generic;
        namespace TestNamespace;
        
        public partial class Permissions {
            public static partial string DuckiesPublic { get => "SZCJO"; }
            private static partial string DuckiesPrivate { get => "BAVET"; }
            internal static partial string DuckiesInternal { get => "8ZEWG"; }
            public static partial string SomethingPublic { get => "JXTZL"; }
            private static partial string SomethingPrivate { get => "MUACH"; }
            internal static partial string SomethingInternal { get => "CXLHZ"; }
        }

        """;
    #endregion

    #region ToUpperCase Test
    [LanguageInjection("csharp")] public const string ToUpperCase = """
        namespace TestNamespace {
            [InfiniLore.Permissions.PermissionsStore(InfiniLore.Permissions.GeneratorFlags.ToUpperCase)]
            public static partial class Permissions {
                [InfiniLore.Permissions.Prefix("data.users")] public static partial string DuckiesPublic { get; }
                [InfiniLore.Permissions.Prefix("data.users")] private static partial string DuckiesPrivate { get; }
                [InfiniLore.Permissions.Prefix("data.users")] internal static partial string DuckiesInternal { get; }
                
                public static partial string SomethingPublic { get; }
                private static partial string SomethingPrivate { get; }
                internal static partial string SomethingInternal { get; }
            }
        }

        """;

    [LanguageInjection("csharp")] public const string ToUpperCaseOutput = """
        // <auto-generated />
        using System.Collections.Generic;
        namespace TestNamespace;

        public partial class Permissions {
            public static partial string DuckiesPublic { get => "DATA.USERS.DUCKIES.PUBLIC"; }
            private static partial string DuckiesPrivate { get => "DATA.USERS.DUCKIES.PRIVATE"; }
            internal static partial string DuckiesInternal { get => "DATA.USERS.DUCKIES.INTERNAL"; }
            public static partial string SomethingPublic { get => "SOMETHING.PUBLIC"; }
            private static partial string SomethingPrivate { get => "SOMETHING.PRIVATE"; }
            internal static partial string SomethingInternal { get => "SOMETHING.INTERNAL"; }
        }
        """;
    #endregion

    #region ParsePrefix Test
    [LanguageInjection("csharp")] public const string ParsePrefix = """
        namespace TestNamespace {
            [InfiniLore.Permissions.PermissionsStore(InfiniLore.Permissions.GeneratorFlags.ParsePrefix)]
            public static partial class Permissions {
                private const string DataUsers = nameof(DataUsers);
                
                [InfiniLore.Permissions.Prefix(DataUsers)] public static partial string DuckiesPublic { get; }
                [InfiniLore.Permissions.Prefix(DataUsers)] private static partial string DuckiesPrivate { get; }
                [InfiniLore.Permissions.Prefix(DataUsers)] internal static partial string DuckiesInternal { get; }
                                
                public static partial string SomethingPublic { get; }
                private static partial string SomethingPrivate { get; }
                internal static partial string SomethingInternal { get; }
            }
        }

        """;

    [LanguageInjection("csharp")] public const string ParsePrefixOutput = """
        // <auto-generated />
        using System.Collections.Generic;
        namespace TestNamespace;
        
        public partial class Permissions {
            public static partial string DuckiesPublic { get => "data.users.duckies.public"; }
            private static partial string DuckiesPrivate { get => "data.users.duckies.private"; }
            internal static partial string DuckiesInternal { get => "data.users.duckies.internal"; }
            public static partial string SomethingPublic { get => "something.public"; }
            private static partial string SomethingPrivate { get => "something.private"; }
            internal static partial string SomethingInternal { get => "something.internal"; }
        }
        """;
    #endregion

    #region ParsePrefixUpperCase Test
    [LanguageInjection("csharp")] public const string ParsePrefixUpperCase = """
        namespace TestNamespace {
            [InfiniLore.Permissions.PermissionsStore(InfiniLore.Permissions.GeneratorFlags.ParsePrefix | InfiniLore.Permissions.GeneratorFlags.ToUpperCase)]
            public static partial class ParsePrefixUpperCasePermissions {
                private const string DataUsers = nameof(DataUsers);
                
                [InfiniLore.Permissions.Prefix(DataUsers)] public static partial string DuckiesPublic { get; }
                [InfiniLore.Permissions.Prefix(DataUsers)] private static partial string DuckiesPrivate { get; }
                [InfiniLore.Permissions.Prefix(DataUsers)] internal static partial string DuckiesInternal { get; }
                                
                public static partial string SomethingPublic { get; }
                private static partial string SomethingPrivate { get; }
                internal static partial string SomethingInternal { get; }
            }
        }

        """;

    [LanguageInjection("csharp")] public const string ParsePrefixUpperCaseOutput = """
        // <auto-generated />
        using System.Collections.Generic;
        namespace TestNamespace;

        public partial class ParsePrefixUpperCasePermissions {
            public static partial string DuckiesPublic { get => "DATA.USERS.DUCKIES.PUBLIC"; }
            private static partial string DuckiesPrivate { get => "DATA.USERS.DUCKIES.PRIVATE"; }
            internal static partial string DuckiesInternal { get => "DATA.USERS.DUCKIES.INTERNAL"; }
            public static partial string SomethingPublic { get => "SOMETHING.PUBLIC"; }
            private static partial string SomethingPrivate { get => "SOMETHING.PRIVATE"; }
            internal static partial string SomethingInternal { get => "SOMETHING.INTERNAL"; }
        }
        """;
    #endregion

    #region MultiplePrefixes Test
    [LanguageInjection("csharp")] public const string MultiplePrefixes = """
        namespace TestNamespace {
            [InfiniLore.Permissions.PermissionsStore()]
            public static partial class MultiplePrefixesPermissions {
                private const string Data = nameof(Data);
                private const string Users = nameof(Users);
                private const string Something = nameof(Something);
                private const string Else = nameof(Else);
                
                [InfiniLore.Permissions.Prefix(Data, Users)] public static partial string DuckiesPublic { get; }
                [InfiniLore.Permissions.Prefix(Data, Users)] private static partial string DuckiesPrivate { get; }
                [InfiniLore.Permissions.Prefix(Data, Users)] internal static partial string DuckiesInternal { get; }
                                
                [InfiniLore.Permissions.Prefix(Data), InfiniLore.Permissions.Prefix(Something) ]public static partial string SomethingPublic { get; }
                [InfiniLore.Permissions.Prefix(Data), InfiniLore.Permissions.Prefix(Something) ]private static partial string SomethingPrivate { get; }
                [InfiniLore.Permissions.Prefix(Data), InfiniLore.Permissions.Prefix(Something) ]internal static partial string SomethingInternal { get; }
                
                [InfiniLore.Permissions.Prefix(Data)] [InfiniLore.Permissions.Prefix(Else)] public static partial string ElsePublic { get; }
                [InfiniLore.Permissions.Prefix(Data)] [InfiniLore.Permissions.Prefix(Else)] private static partial string ElsePrivate { get; }
                [InfiniLore.Permissions.Prefix(Data)] [InfiniLore.Permissions.Prefix(Else)] internal static partial string ElseInternal { get; }
            }
        }

        """;

    [LanguageInjection("csharp")] public const string MultiplePrefixesOutput = """
        // <auto-generated />
        using System.Collections.Generic;
        namespace TestNamespace;

        public partial class MultiplePrefixesPermissions {
            public static partial string DuckiesPublic { get => "data.users.duckies.public"; }
            private static partial string DuckiesPrivate { get => "data.users.duckies.private"; }
            internal static partial string DuckiesInternal { get => "data.users.duckies.internal"; }
            public static partial string SomethingPublic { get => "data.something.something.public"; }
            private static partial string SomethingPrivate { get => "data.something.something.private"; }
            internal static partial string SomethingInternal { get => "data.something.something.internal"; }
            public static partial string ElsePublic { get => "data.else.else.public"; }
            private static partial string ElsePrivate { get => "data.else.else.private"; }
            internal static partial string ElseInternal { get => "data.else.else.internal"; }
        }
        """;
    #endregion

    #region GenerateAllPermissionsMethod Test
    [LanguageInjection("csharp")] public const string GenerateAllPermissionsMethod = """
        namespace TestNamespace {
            [InfiniLore.Permissions.PermissionsStore(InfiniLore.Permissions.GeneratorFlags.GenerateAllPermissionsMethod)]
            public static partial class GenerateAllPermissionsMethodPermissions {
                private const string Data = nameof(Data);
                private const string Users = nameof(Users);
                private const string Something = nameof(Something);
                private const string Else = nameof(Else);
                
                [InfiniLore.Permissions.Prefix(Data, Users)] public static partial string DuckiesPublic { get; }
                [InfiniLore.Permissions.Prefix(Data, Users)] private static partial string DuckiesPrivate { get; }
                [InfiniLore.Permissions.Prefix(Data, Users)] internal static partial string DuckiesInternal { get; }
                                
                [InfiniLore.Permissions.Prefix(Data), InfiniLore.Permissions.Prefix(Something) ]public static partial string SomethingPublic { get; }
                [InfiniLore.Permissions.Prefix(Data), InfiniLore.Permissions.Prefix(Something) ]private static partial string SomethingPrivate { get; }
                [InfiniLore.Permissions.Prefix(Data), InfiniLore.Permissions.Prefix(Something) ]internal static partial string SomethingInternal { get; }
                
                [InfiniLore.Permissions.Prefix(Data)] [InfiniLore.Permissions.Prefix(Else)] public static partial string ElsePublic { get; }
                [InfiniLore.Permissions.Prefix(Data)] [InfiniLore.Permissions.Prefix(Else)] private static partial string ElsePrivate { get; }
                [InfiniLore.Permissions.Prefix(Data)] [InfiniLore.Permissions.Prefix(Else)] internal static partial string ElseInternal { get; }
            }
        }

        """;

    [LanguageInjection("csharp")] public const string GenerateAllPermissionsMethodOutput = """
        // <auto-generated />
        using System.Collections.Generic;
        namespace TestNamespace;

        public partial class GenerateAllPermissionsMethodPermissions {
            public static partial string DuckiesPublic { get => "data.users.duckies.public"; }
            private static partial string DuckiesPrivate { get => "data.users.duckies.private"; }
            internal static partial string DuckiesInternal { get => "data.users.duckies.internal"; }
            public static partial string SomethingPublic { get => "data.something.something.public"; }
            private static partial string SomethingPrivate { get => "data.something.something.private"; }
            internal static partial string SomethingInternal { get => "data.something.something.internal"; }
            public static partial string ElsePublic { get => "data.else.else.public"; }
            private static partial string ElsePrivate { get => "data.else.else.private"; }
            internal static partial string ElseInternal { get => "data.else.else.internal"; }
            
            public static IEnumerable<string> GetAllPermissions() {
                yield return DuckiesPublic;
                yield return DuckiesPrivate;
                yield return DuckiesInternal;
                yield return SomethingPublic;
                yield return SomethingPrivate;
                yield return SomethingInternal;
                yield return ElsePublic;
                yield return ElsePrivate;
                yield return ElseInternal;
            }
        }
        """;
    #endregion

}
