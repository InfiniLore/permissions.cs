// ---------------------------------------------------------------------------------------------------------------------
// Imports
// ---------------------------------------------------------------------------------------------------------------------
using InfiniLore.Permissions;
using InfiniLore.Permissions.Generators;
using JetBrains.Annotations;
using Microsoft.CodeAnalysis;
using System;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using Xunit;

namespace Tests.InfiniLore.Permissions.Generators;
// ---------------------------------------------------------------------------------------------------------------------
// Code
// ---------------------------------------------------------------------------------------------------------------------
public class PermissionsRepoGeneratorTests : IncrementalGeneratorTest<PermissionsRepoGenerator> {
    protected override Assembly[] ReferenceAssemblies { get; } = [
        typeof(object).Assembly,
        typeof(ValueTuple).Assembly,
        typeof(Attribute).Assembly,
        typeof(Console).Assembly,
        Assembly.Load("System.Runtime"),
        typeof(PermissionsRepoAttribute).Assembly,
        typeof(GeneratorFlags).Assembly,
        typeof(PrefixAttribute).Assembly,
    ];
    
    // -----------------------------------------------------------------------------------------------------------------
    // Methods
    // -----------------------------------------------------------------------------------------------------------------
    [Theory]
    [InlineData(SinglePermission, SinglePermissionOutput, "Permissions")]
    [InlineData(DifferentAccessModifiers, DifferentAccessModifiersOutput, "Permissions")]
    [InlineData(ToUpperCase, ToUpperCaseOutput, "Permissions")]
    [InlineData(Obfuscation, ObfuscationOutput, "Permissions")]
    [InlineData(ObfuscationUppercase, ObfuscationUppercaseOutput, "Permissions")]
    [InlineData(ParsePrefix, ParsePrefixOutput, "Permissions")]
    [InlineData(ParsePrefixUpperCase, ParsePrefixUpperCaseOutput, "ParsePrefixUpperCasePermissions")]
    public async Task TestText(string inputText, string expectedOutput, string repoName) {
        GeneratorDriverRunResult runResult = await RunGeneratorAsync(inputText);
        
        GeneratedSourceResult? generatedSource = runResult.Results
            .SelectMany(result => result.GeneratedSources)
            .SingleOrDefault(result => result.HintName.EndsWith($"{repoName}.g.cs"));

        Assert.NotNull(generatedSource?.SourceText);
        Assert.Equal(
            expectedOutput.Trim(),
            generatedSource.Value.SourceText.ToString().Trim(),
            ignoreLineEndingDifferences: true,
            ignoreWhiteSpaceDifferences: true
        );
        
    }
    
    // -----------------------------------------------------------------------------------------------------------------
    // Test cases
    // -----------------------------------------------------------------------------------------------------------------
    #region SinglePermission Test
    [LanguageInjection("csharp")] private const string SinglePermission = """
        namespace TestNamespace {
            [InfiniLore.Permissions.PermissionsRepo]
            public static partial class Permissions {
                [InfiniLore.Permissions.Prefix("data.users")] public static partial string DuckiesRead { get; }
            }
        }
        
        """;

    [LanguageInjection("csharp")] private const string SinglePermissionOutput = """
        // <auto-generated />
        namespace TestNamespace;

        public partial class Permissions {
            public static partial string DuckiesRead { get => "data.users.duckies.read"; }
        }
        """;
    #endregion

    #region DifferentAccessModifiers Test
    [LanguageInjection("csharp")] private const string DifferentAccessModifiers = """
        namespace TestNamespace {
            [InfiniLore.Permissions.PermissionsRepo]
            public static partial class Permissions {
                [InfiniLore.Permissions.Prefix("data.users")] public static partial string DuckiesPublic { get; }
                [InfiniLore.Permissions.Prefix("data.users")] private static partial string DuckiesPrivate { get; }
                [InfiniLore.Permissions.Prefix("data.users")] internal static partial string DuckiesInternal { get; }
                
                public static partial string SomethingPublic { get; }
                private static partial string SomethingPrivate { get; }
                internal static partial string SomethingInternal { get; }
            }
        }

        """;

    [LanguageInjection("csharp")] private const string DifferentAccessModifiersOutput = """
        // <auto-generated />
        namespace TestNamespace;

        public partial class Permissions {
            public static partial string DuckiesPublic { get => "data.users.duckies.public"; }
            private static partial string DuckiesPrivate { get => "data.users.duckies.private"; }
            internal static partial string DuckiesInternal { get => "data.users.duckies.internal"; }
            public static partial string SomethingPublic { get => "something.public"; }
            private static partial string SomethingPrivate { get => "something.private"; }
            internal static partial string SomethingInternal { get => "something.internal"; }
        }
        """;
    #endregion

    #region Obfuscation Test
    [LanguageInjection("csharp")] private const string Obfuscation = """
        namespace TestNamespace {
            [InfiniLore.Permissions.PermissionsRepo(InfiniLore.Permissions.GeneratorFlags.Obfuscate)]
            public static partial class Permissions {
                [InfiniLore.Permissions.Prefix("data.users")] public static partial string DuckiesPublic { get; }
                [InfiniLore.Permissions.Prefix("data.users")] private static partial string DuckiesPrivate { get; }
                [InfiniLore.Permissions.Prefix("data.users")] internal static partial string DuckiesInternal { get; }
                        
                public static partial string SomethingPublic { get; }
                private static partial string SomethingPrivate { get; }
                internal static partial string SomethingInternal { get; }
            }
        }

        """;

    [LanguageInjection("csharp")] private const string ObfuscationOutput = """
        // <auto-generated />
        namespace TestNamespace;
        
        public partial class Permissions {
            public static partial string DuckiesPublic { get => "SzCjo"; }
            private static partial string DuckiesPrivate { get => "bAvet"; }
            internal static partial string DuckiesInternal { get => "8zEwg"; }
            public static partial string SomethingPublic { get => "JxtZL"; }
            private static partial string SomethingPrivate { get => "mUACH"; }
            internal static partial string SomethingInternal { get => "Cxlhz"; }
        }
        
        """;
    #endregion
    
    #region Obfuscation Test
    [LanguageInjection("csharp")] private const string ObfuscationUppercase = """
        namespace TestNamespace {
            [InfiniLore.Permissions.PermissionsRepo(InfiniLore.Permissions.GeneratorFlags.Obfuscate | InfiniLore.Permissions.GeneratorFlags.ToUpperCase)]
            public static partial class Permissions {
                [InfiniLore.Permissions.Prefix("data.users")] public static partial string DuckiesPublic { get; }
                [InfiniLore.Permissions.Prefix("data.users")] private static partial string DuckiesPrivate { get; }
                [InfiniLore.Permissions.Prefix("data.users")] internal static partial string DuckiesInternal { get; }
                        
                public static partial string SomethingPublic { get; }
                private static partial string SomethingPrivate { get; }
                internal static partial string SomethingInternal { get; }
            }
        }

        """;

    [LanguageInjection("csharp")] private const string ObfuscationUppercaseOutput = """
        // <auto-generated />
        namespace TestNamespace;
        
        public partial class Permissions {
            public static partial string DuckiesPublic { get => "SZCJO"; }
            private static partial string DuckiesPrivate { get => "BAVET"; }
            internal static partial string DuckiesInternal { get => "8ZEWG"; }
            public static partial string SomethingPublic { get => "JXTZL"; }
            private static partial string SomethingPrivate { get => "MUACH"; }
            internal static partial string SomethingInternal { get => "CXLHZ"; }
        }

        """;
    #endregion

    #region ToUpperCase Test
    [LanguageInjection("csharp")] private const string ToUpperCase = """
        namespace TestNamespace {
            [InfiniLore.Permissions.PermissionsRepo(InfiniLore.Permissions.GeneratorFlags.ToUpperCase)]
            public static partial class Permissions {
                [InfiniLore.Permissions.Prefix("data.users")] public static partial string DuckiesPublic { get; }
                [InfiniLore.Permissions.Prefix("data.users")] private static partial string DuckiesPrivate { get; }
                [InfiniLore.Permissions.Prefix("data.users")] internal static partial string DuckiesInternal { get; }
                
                public static partial string SomethingPublic { get; }
                private static partial string SomethingPrivate { get; }
                internal static partial string SomethingInternal { get; }
            }
        }

        """;

    [LanguageInjection("csharp")] private const string ToUpperCaseOutput = """
        // <auto-generated />
        namespace TestNamespace;

        public partial class Permissions {
            public static partial string DuckiesPublic { get => "DATA.USERS.DUCKIES.PUBLIC"; }
            private static partial string DuckiesPrivate { get => "DATA.USERS.DUCKIES.PRIVATE"; }
            internal static partial string DuckiesInternal { get => "DATA.USERS.DUCKIES.INTERNAL"; }
            public static partial string SomethingPublic { get => "SOMETHING.PUBLIC"; }
            private static partial string SomethingPrivate { get => "SOMETHING.PRIVATE"; }
            internal static partial string SomethingInternal { get => "SOMETHING.INTERNAL"; }
        }
        """;
    #endregion

    #region ParsePrefix Test
    [LanguageInjection("csharp")] private const string ParsePrefix = """
        namespace TestNamespace {
            [InfiniLore.Permissions.PermissionsRepo(InfiniLore.Permissions.GeneratorFlags.ParsePrefix)]
            public static partial class Permissions {
                private const string DataUsers = nameof(DataUsers);
                
                [InfiniLore.Permissions.Prefix(DataUsers)] public static partial string DuckiesPublic { get; }
                [InfiniLore.Permissions.Prefix(DataUsers)] private static partial string DuckiesPrivate { get; }
                [InfiniLore.Permissions.Prefix(DataUsers)] internal static partial string DuckiesInternal { get; }
                                
                public static partial string SomethingPublic { get; }
                private static partial string SomethingPrivate { get; }
                internal static partial string SomethingInternal { get; }
            }
        }

        """;

    [LanguageInjection("csharp")] private const string ParsePrefixOutput = """
        // <auto-generated />
        namespace TestNamespace;
        
        public partial class Permissions {
            public static partial string DuckiesPublic { get => "data.users.duckies.public"; }
            private static partial string DuckiesPrivate { get => "data.users.duckies.private"; }
            internal static partial string DuckiesInternal { get => "data.users.duckies.internal"; }
            public static partial string SomethingPublic { get => "something.public"; }
            private static partial string SomethingPrivate { get => "something.private"; }
            internal static partial string SomethingInternal { get => "something.internal"; }
        }
        """;
    #endregion

    #region ParsePrefixUpperCase Test
    [LanguageInjection("csharp")] private const string ParsePrefixUpperCase = """
        namespace TestNamespace {
            [InfiniLore.Permissions.PermissionsRepo(InfiniLore.Permissions.GeneratorFlags.ParsePrefix | InfiniLore.Permissions.GeneratorFlags.ToUpperCase)]
            public static partial class ParsePrefixUpperCasePermissions {
                private const string DataUsers = nameof(DataUsers);
                
                [InfiniLore.Permissions.Prefix(DataUsers)] public static partial string DuckiesPublic { get; }
                [InfiniLore.Permissions.Prefix(DataUsers)] private static partial string DuckiesPrivate { get; }
                [InfiniLore.Permissions.Prefix(DataUsers)] internal static partial string DuckiesInternal { get; }
                                
                public static partial string SomethingPublic { get; }
                private static partial string SomethingPrivate { get; }
                internal static partial string SomethingInternal { get; }
            }
        }

        """;

    [LanguageInjection("csharp")] private const string ParsePrefixUpperCaseOutput = """
        // <auto-generated />
        namespace TestNamespace;

        public partial class ParsePrefixUpperCasePermissions {
            public static partial string DuckiesPublic { get => "DATA.USERS.DUCKIES.PUBLIC"; }
            private static partial string DuckiesPrivate { get => "DATA.USERS.DUCKIES.PRIVATE"; }
            internal static partial string DuckiesInternal { get => "DATA.USERS.DUCKIES.INTERNAL"; }
            public static partial string SomethingPublic { get => "SOMETHING.PUBLIC"; }
            private static partial string SomethingPrivate { get => "SOMETHING.PRIVATE"; }
            internal static partial string SomethingInternal { get => "SOMETHING.INTERNAL"; }
        }
        """;
    #endregion
    
}
